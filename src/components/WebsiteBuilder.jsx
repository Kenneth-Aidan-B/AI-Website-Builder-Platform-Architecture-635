import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { useTokens } from '../contexts/TokenContext';
import SafeIcon from '../common/SafeIcon';
import * as FiIcons from 'react-icons/fi';
import toast from 'react-hot-toast';

const { FiSend, FiCode, FiLoader, FiDownload, FiEye } = FiIcons;

const WebsiteBuilder = ({ selectedModel }) => {
  const [prompt, setPrompt] = useState('');
  const [generating, setGenerating] = useState(false);
  const [generatedWebsite, setGeneratedWebsite] = useState(null);
  const { deductTokens, MODEL_MULTIPLIERS } = useTokens();

  const handleGenerate = async (e) => {
    e.preventDefault();
    
    if (!prompt.trim()) {
      toast.error('Please enter a website description');
      return;
    }

    setGenerating(true);

    try {
      // Simulate API call and token usage
      const estimatedTokens = Math.floor(prompt.length * 2.5); // Rough estimation
      
      const success = await deductTokens(selectedModel, estimatedTokens);
      if (!success) {
        setGenerating(false);
        return;
      }

      // Simulate website generation (in production, this would call your backend)
      await new Promise(resolve => setTimeout(resolve, 3000));

      const mockWebsite = {
        html: `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Generated Website</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 0; }
        .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
        .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 60px 20px; text-align: center; }
        .content { padding: 40px 20px; }
        .feature { margin-bottom: 30px; }
    </style>
</head>
<body>
    <div class="header">
        <h1>Your Generated Website</h1>
        <p>Built with ${selectedModel} AI model</p>
    </div>
    <div class="container">
        <div class="content">
            <div class="feature">
                <h2>About Your Project</h2>
                <p>${prompt}</p>
            </div>
            <div class="feature">
                <h2>AI-Generated Content</h2>
                <p>This website was generated using advanced AI technology. The model analyzed your requirements and created a custom solution.</p>
            </div>
        </div>
    </div>
</body>
</html>`,
        css: `/* Generated CSS */
body {
    font-family: 'Arial', sans-serif;
    line-height: 1.6;
    color: #333;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
}

.header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 60px 20px;
    text-align: center;
}`,
        js: `// Generated JavaScript
console.log('Website generated with ${selectedModel}');

document.addEventListener('DOMContentLoaded', function() {
    console.log('Website loaded successfully!');
    
    // Add smooth scrolling
    const links = document.querySelectorAll('a[href^="#"]');
    links.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
                target.scrollIntoView({ behavior: 'smooth' });
            }
        });
    });
});`,
        tokensUsed: estimatedTokens,
        model: selectedModel
      };

      setGeneratedWebsite(mockWebsite);
      toast.success(`Website generated successfully! Used ${estimatedTokens} tokens with ${selectedModel}`);
    } catch (error) {
      console.error('Generation error:', error);
      toast.error('Failed to generate website');
    } finally {
      setGenerating(false);
    }
  };

  const downloadWebsite = () => {
    if (!generatedWebsite) return;

    const zip = `
Website Files Generated by BuilderForge AI
==========================================

index.html:
${generatedWebsite.html}

styles.css:
${generatedWebsite.css}

script.js:
${generatedWebsite.js}

Generation Details:
- Model: ${generatedWebsite.model}
- Tokens Used: ${generatedWebsite.tokensUsed}
- Generated: ${new Date().toLocaleString()}
    `;

    const blob = new Blob([zip], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'generated-website.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5, delay: 0.2 }}
      className="bg-white rounded-xl shadow-sm border border-gray-200 p-6"
    >
      <h2 className="text-xl font-semibold text-gray-900 mb-6 flex items-center">
        <SafeIcon icon={FiCode} className="h-5 w-5 mr-2" />
        AI Website Builder
      </h2>

      <form onSubmit={handleGenerate} className="mb-6">
        <div className="mb-4">
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Describe your website
          </label>
          <textarea
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            placeholder="E.g., Create a modern landing page for a tech startup with hero section, features, pricing, and contact form. Use blue and white color scheme with clean typography."
            rows={4}
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 resize-none"
            disabled={generating}
          />
        </div>

        <div className="flex items-center justify-between">
          <div className="text-sm text-gray-600">
            Using: <span className="font-medium">{selectedModel}</span> 
            <span className="ml-2 text-xs bg-gray-100 px-2 py-1 rounded">
              {MODEL_MULTIPLIERS[selectedModel]}Ã— Builder Tokens
            </span>
          </div>
          <button
            type="submit"
            disabled={generating || !prompt.trim()}
            className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center"
          >
            {generating ? (
              <>
                <SafeIcon icon={FiLoader} className="animate-spin h-4 w-4 mr-2" />
                Generating...
              </>
            ) : (
              <>
                <SafeIcon icon={FiSend} className="h-4 w-4 mr-2" />
                Generate Website
              </>
            )}
          </button>
        </div>
      </form>

      {generatedWebsite && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="border-t border-gray-200 pt-6"
        >
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-medium text-gray-900">Generated Website</h3>
            <div className="flex space-x-2">
              <button
                onClick={downloadWebsite}
                className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 flex items-center"
              >
                <SafeIcon icon={FiDownload} className="h-4 w-4 mr-2" />
                Download
              </button>
            </div>
          </div>

          <div className="bg-gray-50 rounded-lg p-4 mb-4">
            <div className="flex items-center justify-between text-sm text-gray-600 mb-2">
              <span>Model: {generatedWebsite.model}</span>
              <span>Tokens Used: {generatedWebsite.tokensUsed}</span>
            </div>
          </div>

          <div className="space-y-4">
            <div>
              <h4 className="font-medium text-gray-900 mb-2">HTML Preview</h4>
              <div className="bg-gray-900 text-green-400 p-4 rounded-lg overflow-x-auto">
                <pre className="text-sm">
                  <code>{generatedWebsite.html.substring(0, 500)}...</code>
                </pre>
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <h4 className="font-medium text-gray-900 mb-2">CSS</h4>
                <div className="bg-gray-900 text-blue-400 p-4 rounded-lg overflow-x-auto">
                  <pre className="text-sm">
                    <code>{generatedWebsite.css.substring(0, 200)}...</code>
                  </pre>
                </div>
              </div>
              <div>
                <h4 className="font-medium text-gray-900 mb-2">JavaScript</h4>
                <div className="bg-gray-900 text-yellow-400 p-4 rounded-lg overflow-x-auto">
                  <pre className="text-sm">
                    <code>{generatedWebsite.js.substring(0, 200)}...</code>
                  </pre>
                </div>
              </div>
            </div>
          </div>
        </motion.div>
      )}
    </motion.div>
  );
};

export default WebsiteBuilder;